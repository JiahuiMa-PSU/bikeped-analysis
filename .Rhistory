knitr::opts_chunk$set(echo = TRUE)
monthly <- read_csv('data/month_state_fc_avg.csv')
library(flexdashboard)
library(dplyr)
library(readr)
library(ggplot2)
library(tidyverse)
library(plotly)
library(shiny)
monthly <- read_csv('data/month_state_fc_avg.csv')
monthly2019 <- read_csv('data/month_state_fc_avg2019.csv')
View(monthly)
library (dplyr)
# monthly mean daily volume by detectors
monthly_mean_daily <- read.csv('data/mean_daily_vol_per_month.csv')
monthly <- monthly_mean_daily %>%
mutate(month = factor(format(as.Date(date), "%b"), levels = month.abb))%>%
mutate(year = as.integer(format(date, "%Y")))
monthly <- read.csv('monthly_state_fc.csv')
monthly <- read.csv('data/monthly_state_fc.csv')
monthly <- read.csv('data/monthly_state_fc_avg.csv')
monthly <- read.csv('data\monthly_state_fc_avg.csv')
monthly <- read.csv('data/month_state_fc_avg.csv')
monthly_mean <- monthly_mean_daily %>%
mutate(month = factor(format(as.Date(date), "%b"), levels = month.abb))%>%
mutate(year = as.integer(format(date, "%Y")))
monthly_mean <- monthly_mean_daily %>%
mutate(month = factor(format(as.Date(date), "%b"), levels = month.abb))
monthly_mean <- monthly_mean_daily %>%
mutate(month = factor(format(as.Date(date), "%b"), levels = month.abb))%>%
mutate(year = as.integer(format(as.date, "%Y")))
monthly_mean <- monthly_mean_daily %>%
mutate(month = factor(format(as.Date(date), "%b"), levels = month.abb))%>%
mutate(year = as.integer(format(date, "%Y")))
monthly_mean <- monthly_mean_daily %>%
mutate(month = factor(format(as.Date(date), "%b"), levels = month.abb))%>%
mutate(year = integer(format(as.Date(date), "%Y")))
monthly_mean <- monthly_mean_daily %>%
mutate(month = factor(format(as.Date(date), "%b"), levels = month.abb),
year = integer(format(as.Date(date), "%Y")))
monthly_mean <- monthly_mean_daily %>%
mutate(month = factor(format(as.Date(date), "%b"), levels = month.abb),
year = as.integer(format(as.Date(date), "%Y")))
View(monthly_mean)
View(monthly_mean)
monthly_mean_function <- monthly_mean %>%
group_by(state, functional_classification, month, year) %>%
mutate(avg_daily_vol = mean(mean_volume)) %>%
head()
View(monthly_mean_function)
monthly_mean_function <- monthly_mean %>%
group_by(state, functional_classification, month, year) %>%
mutate(avg_daily_vol = mean(mean_volume))
monthly_mean <- read.csv('data/mean_daily_vol_per_month.csv')
monthly_mean <- monthly_mean %>%
mutate(month = factor(format(as.Date(date), "%b"), levels = month.abb),
year = as.integer(format(as.Date(date), "%Y")))
monthly_mean_function <- monthly_mean %>%
group_by(state, functional_classification, month, year) %>%
mutate(avg_daily_vol = mean(mean_volume))
View(monthly_mean_function)
monthly_mean_function <- monthly_mean %>%
group_by(state, functional_classification, month, year) %>%
summarize(avg_daily_vol = mean(mean_volume))
View(monthly_mean_function)
monthly_mean_function <- monthly_mean %>%
group_by(state, functional_classification, month, year) %>%
summarize(avg_daily_vol = mean(mean_volume)) %>%
mutate_if(is.numeric, round, 2)
View(monthly_mean_function)
# average daily volume by facility type
monthly_mean_facility <- monthly_mean %>%
group_by(state, facility_type, month, year) %>%
summarize(avg_daily_vol = mean(mean_volume)) %>%
mutate_if(is.numeric, round, 2)
View(monthly_mean_facility)
monthly_mean_function <- monthly_mean %>%
group_by(state, functional_classification) %>%
summarize(avg_daily_vol = mean(mean_volume)) %>%
mutate_if(is.numeric, round, 2)
View(monthly_mean_function)
View(monthly_mean_function)
monthly_mean_function <- monthly_mean %>%
group_by(state + functional_classification + month+ year) %>%
summarize(avg_daily_vol = mean(mean_volume)) %>%
mutate_if(is.numeric, round, 2)
monthly_mean_function <- monthly_mean %>%
group_by(a = state + functional_classification + month+ year) %>%
summarize(avg_daily_vol = mean(mean_volume)) %>%
mutate_if(is.numeric, round, 2)
View(monthly_mean_function)
monthly_mean_function <- monthly_mean %>%
group_by(state, functional_classification, month, year) %>%
summarize(avg_daily_vol = mean(mean_volume)) %>%
mutate_if(is.numeric, round, 2)
View(monthly_mean_function)
View(monthly_mean)
View(monthly_mean)
monthly_mean_function <- monthly_mean %>%
group_by( functional_classification, month, year,state) %>%
summarize(avg_daily_vol = mean(mean_volume)) %>%
mutate_if(is.numeric, round, 2)
monthly_mean_function <- monthly_mean %>%
group_by( functional_classification, month, year,state) %>%
summarize(avg_daily_vol = mean(mean_volume))
View(monthly_mean_function)
monthly_mean_function <- monthly_mean %>%
group_by( functional_classification, month, year) %>%
summarize(avg_daily_vol = mean(mean_volume))
View(monthly_mean_function)
help(group_by)
monthly_mean_function <- monthly_mean %>%
group_by( state, functional_classification) %>%
summarize(avg_daily_vol = mean(mean_volume))
View(monthly_mean_function)
monthly_mean_function <- monthly_mean %>%
group_by( state, functional_classification, month, year) %>%
summarise(average_mean_volume = mean(mean_volume, na.rm = TRUE))
View(monthly_mean_function)
monthly_mean_function <- monthly_mean %>%
group_by( state, functional_classification, month, year) %>%
summarise(average_mean_volume = mean(mean_volume, na.rm = TRUE),.groups = 'drop')
View(monthly_mean_function)
monthly_mean_function <- monthly_mean %>%
group_by( state, functional_classification, month, year) %>%
summarize(avg_daily_vol = mean(mean_volume, na.rm = TRUE))
monthly_mean_function <- monthly_mean %>%
group_by( state, functional_classification, month, year) %>%
summarise(avg_daily_vol = mean(mean_volume, na.rm = TRUE))
library(shiny)
runApp('shiny')
runApp("example")
runApp('shiny')
runApp('shiny')
runApp('shiny')
View(monthly_mean_facility)
runApp('shiny')
monthly_mean <- monthly_mean %>%
mutate(month = factor(format(as.Date(date), "%b"), levels = month.abb),
year = as.integer(format(as.Date(date), "%Y")))
runApp('shiny')
monthly_mean <- read.csv('shiny/www/mean_daily_vol_per_month.csv')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
install.packages("leaflet")
leaflet() %>%
addTiles()
library(leaflet)
leaflet() %>%
addTiles()
shiny::runApp('shiny')
library(leaflet)
m = leaflet() %>% addTiles()
m  # a map with the default OSM tile layer
m = m %>% setView(-93.65, 42.0285, zoom = 17)
m
m %>% addPopups(-93.65, 42.0285, 'Here is the <b>Department of Statistics</b>, ISU')
shiny::runApp('shiny')
leaflet() %>%
addTiles() %>%
setView(lng = -93.85, lat = 37.45, zoom = 4)
runApp('shiny')
runApp('shiny')
#load map data
segment = read.csv('www/segment_are.csv')
#load map data
segment <- read.csv('www/segment_are.csv')
# monthly mean daily volume by detectors
monthly_mean <- read.csv('www/mean_daily_vol_per_month.csv')
#load map data
segment <- read.csv('shiny/www/segment_are.csv')
shiny::runApp('shiny')
# monthly mean daily volume by detectors
monthly_mean <- read.csv('shiny/www/mean_daily_vol_per_month.csv')
runApp('shiny')
getwd()
runApp('shiny')
setwd("~/Desktop/PDX/RA/BikePed_Portal/Analysis/bikeped-analysis")
runApp('shiny')
runApp('shiny')
runApp('shiny')
View(segment)
View(segment)
runApp('shiny')
runApp('shiny')
runApp('shiny')
monthly_mean <- monthly_mean %>%
mutate(month= month(month))
library(lubridate)
install.packages("lubridate")
install.packages("lubridate")
library(lubridate)
# monthly mean daily volume by detectors
monthly_mean <- read.csv('www/mean_daily_vol_per_month_mn.csv')
# monthly mean daily volume by detectors
monthly_mean <- read.csv('shiny/www/mean_daily_vol_per_month_mn.csv')
View(monthly_mean)
View(monthly_mean_facility)
monthly_mean <- read.csv('shiny/www/mean_daily_vol_per_month_mn.csv')
monthly_mean <- monthly_mean %>%
#  mutate(month= month(month))
mutate(month = factor(format(as.Date(date), "%b"), levels = month.abb),
year = as.integer(format(as.Date(date), "%Y")))
library(shiny)
library(dplyr)
library(readr)
library(ggplot2)
library(plotly)
library(leaflet)
library(lubridate)
# monthly mean daily volume by detectors
monthly_mean <- read.csv('shiny/www/mean_daily_vol_per_month_mn.csv')
monthly_mean <- monthly_mean %>%
#  mutate(month= month(month))
mutate(month = factor(format(as.Date(date), "%b"), levels = month.abb),
year = as.integer(format(as.Date(date), "%Y")))
# monthly mean daily volume by detectors
monthly_mean <- read.csv('shiny/www/mean_daily_vol_per_month_mn.csv')
monthly_mean <- monthly_mean %>%
mutate(date_time = ymd_hms(month))%>%
mutate(year = year(date_time), month = month(date_time))
monthly_mean <- monthly_mean %>%
mutate(date_time = ymd_hms(month))%>%
mutate(year = year(date_time), month = month(date_time, label = TRUE, abbr = TRUE))
View(monthly_mean)
monthly_mean <- read.csv('shiny/www/mean_daily_vol_per_month_mn.csv')
monthly_mean <- monthly_mean %>%
mutate(date_time = ymd_hms(month))%>%
mutate(year = year(date_time), month = month(date_time, label = TRUE, abbr = TRUE))
monthly_mean_function <- monthly_mean %>%
group_by(state, functional_classification, month, year) %>%
summarize(avg_daily_vol = mean(mean_volume)) %>%
mutate_if(is.numeric, round, 2)
# average daily volume by facility type
monthly_mean_facility <- monthly_mean %>%
group_by(state, facility_type, month, year) %>%
summarize(avg_daily_vol = mean(mean_volume)) %>%
mutate_if(is.numeric, round, 2)
runApp('shiny')
runApp('shiny')
View(monthly_mean_facility)
View(monthly_mean_facility)
View(monthly_mean_function)
runApp('shiny')
View(monthly_mean_facility)
runApp('shiny')
?buildMap()
?buildmap()
library(leaflet)
?buildMap()
runApp('shiny')
runApp('shiny')
runApp('shiny')
View(segment)
runApp('shiny')
#load map data
segment <- read.csv('www/segment_area.csv')
#load map data
segment <- read.csv('segment_area.csv')
#load map data
segment <- read.csv('www/segment_area.csv')
getwd()
#load map data
segment <- read.csv('shiny/www/segment_area.csv')
runApp('shiny')
runApp('shiny')
summary_df <- segment %>%
group_by(state) %>%
summarize(
num_segment_area_id = n_distinct(segment_area_id),
num_flow_detector_id = n_distinct(flow_detector_id)
)
# Print the summary
print(summary_df)
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
summary_df <- segment %>%
group_by(state) %>%
summarize(
num_segment_area_id = n_distinct(segment_area_id),
num_flow_detector_id = n_distinct(flow_detector_id)
)%>%
group_by(state, functional_classification) %>%
summarize(
num = n_distinct(segment_area_id)
)
summary_df <- segment %>%
group_by(state) %>%
summarize(
num_segment_area_id = n_distinct(segment_area_id),
num_flow_detector_id = n_distinct(flow_detector_id)
)%>%
group_by(functional_classification) %>%
summarize(
num = n_distinct(segment_area_id)
)
functional_classification_summary <- df %>%
group_by(state, functional_classification) %>%
summarize(
num_segment_area_id = n_distinct(segment_area_id)
)
summary_df <- segment %>%
group_by(state) %>%
summarize(
num_segment_area_id = n_distinct(segment_area_id),
num_flow_detector_id = n_distinct(flow_detector_id)
)
functional_classification_summary <- segment %>%
group_by(state, functional_classification) %>%
summarize(
num_segment_area_id = n_distinct(segment_area_id)
)
View(functional_classification_summary)
runApp('shiny')
runApp('shiny')
?menuItem
library(readr)
Open_Count_List_Statistics <- read_csv("~/Downloads/Open Count List - Statistics.rtf")
runApp('shiny')
View(monthly_mean)
getwd()
library(pdftools)
library(readr)
# Define the path to the PDF file
pdf_path <- "Open Count List 2022- Class Averages.pdf"
# Extract text from the PDF
pdf_text <- pdf_text(pdf_path)
# Split the text into lines
pdf_lines <- unlist(strsplit(pdf_text, "\n"))
# Extract relevant lines (skip headers or any other irrelevant lines if needed)
# Assuming that the relevant data starts from line 3 for example
relevant_lines <- pdf_lines[3:length(pdf_lines)]
# Further process the lines if needed (e.g., split by spaces or tabs)
# Here we assume each line is tab-separated for simplicity
data <- do.call(rbind, strsplit(relevant_lines, "\t"))
View(data)
shiny::runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
View(segment_area)
runApp('shiny')
